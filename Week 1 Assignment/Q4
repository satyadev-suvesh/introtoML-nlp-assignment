import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

positive_reviews = ['I loved this movie', 'Amazing film', 'Fantastic acting in the movie', 'Great direction', 'Loved the plot',
                    'Brilliant work', 'Highly recommended', 'Superb', 'Enjoyed every moment', 'Best movie ever'] * 5

negative_reviews = ['I hate this movie', 'Terrible film', 'Awful acting', 'Bad direction', 'Worst plot ever',
                    'Horrible work', 'not recommended to anyone', 'Really Boring movie bruh', 'Regret watching it', 'Worst movie ever'] * 5

reviews = positive_reviews + negative_reviews
sentiments = ['positive'] * 50 + ['negative'] * 50

df = pd.DataFrame({'Review': reviews, 'Sentiment': sentiments})

vectorizer = CountVectorizer(max_features=500, stop_words='english')
X = vectorizer.fit_transform(df['Review'])
y = df['Sentiment']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = MultinomialNB()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Test accuracy:", accuracy)

def predict_review_sentiment(model, vectorizer, review):
    review_vec = vectorizer.transform([review])
    return model.predict(review_vec)[0]
